import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.zip.GZIPInputStream;

public class Group18 {

	// It's 1000 longs, check it ;)
	private static long[] myLongs = { 2272919233031569408L, 24016544256854L, 1478836238948843808L, 8400657401026116550L,
			-7897182701297302448L, 4630155883720401454L, 5280284928544077439L, -686249260627857040L,
			6854458975057332163L, -6251553742750036337L, -8671612618315160514L, -6557736805347146927L,
			2290862452476209863L, 4896389611900893048L, -1720639387220257401L, -6088990357004898092L,
			-8667952928528745349L, 4358543322287837087L, -1530194971953988880L, -3466678884888388739L,
			8680754787967254303L, 1121385181496708999L, -6372725519090772081L, -8676195808955238147L,
			8698890762506342255L, -1531124171414250015L, 5607926152619869083L, -2992194056312362339L,
			4448987849464823738L, -4739827808665998232L, -24701376443691026L, 6907887936158998105L,
			7887614192599741400L, -4955543035566006819L, -4910762579160408100L, 9217736687369055935L,
			-5480988659779428396L, 4555671321118767839L, -1576332524791846969L, 5737297462361176894L,
			-307476650747564149L, -414349857890140170L, 8354169521940676095L, -6124971222389512458L,
			-3621729905070378531L, -2382493814536310530L, 4894752517813827537L, 8327101284007529374L,
			-2347853433437964801L, -1369816393809138948L, -7360513502355046925L, -8196597915834205849L,
			-6936670137847776693L, -1751948221879694690L, -2887159795445957017L, -3503819210818310277L,
			-6955555501207725937L, -1225557491404806475L, 4493035004178974715L, -8663802318395502610L,
			-6929768944323798001L, 6674226482720265539L, -5384003815616862614L, -8540046021779085666L,
			-5058072947708856461L, -356928786789642412L, 7680144716085212085L, 6549252486677328268L,
			8065030444260617197L, -910328490237274121L, 1692024045439739102L, -3081677746516657237L,
			-1451920661056078453L, 8902379443616372211L, 2152121647752282086L, -2686550081855127573L,
			-243771109722689538L, 8928368591585009023L, 8137868134601061149L, -2486139896688312972L,
			-159317792310048482L, -2318512578802747654L, -8723754563115082017L, -3531455774457463091L,
			-184657504101327012L, 9176083892721759039L, -1298186931097698327L, -2403872236550318213L,
			-4623651797459845641L, -3099136891364247603L, -2576248103598690331L, -2398321833310699883L,
			-353622318673830185L, -667281806675947779L, 4320425344195428261L, -88678567874659809L,
			-1449604210102497593L, 8919206854850444017L, -2026205922323646202L, -1520108114640372930L,
			-8185444193742531953L, -3057091702579421484L, -185668281754488073L, -8467424836693613081L,
			5401832986560148771L, -136203139513896473L, -2820678904086868357L, -5341622243071988400L,
			1971468115123801566L, -1640653992974265609L, -5972705584222069667L, -342679652328282213L,
			1920253315747076751L, 3118562670053685021L, 2035478425165869783L, 8606560303318535839L,
			-3080783256317085713L, -8401536055312916344L, 2686361722521900856L, 8285614853218860405L,
			-1198160720588541153L, 5444306550431273399L, 8141559823876956138L, -4716989202774992193L,
			-7133856911360295237L, -4137995039638883556L, 9087275654850280273L, -1346580693802586385L,
			863420143606668921L, -1586210611208179485L, -1694698837881276560L, -231057009499076294L,
			6781561094094038839L, -8144828226748700701L, -2458555887267359911L, -7071029851083705232L,
			-8470484203973123441L, -8695427654020097202L, -7396346291224101753L, 839730759932805971L,
			7309242510001796942L, -5156390180658256925L, -2834222123059619913L, 3401795102991891064L,
			-1771918232012806199L, 8873916410528771407L, 6372824727971130234L, -6939800027986594669L,
			1373206945014757730L, -4537082718013374987L, 7943757672902770149L, 4971924544537784570L,
			-2639604275073803140L, 227359097262513725L, -1948715864911976053L, 7727584274676579015L,
			-1609056240439417210L, 119072161078701039L, -1261720860936929821L, -6600135072241068933L,
			6123740991909114942L, -186900124078572812L, -3153350728400786073L, -7136924668926460102L,
			4492199792452952820L, -3819800242199180897L, 4098768280893684420L, -8505241962340234818L,
			4374098792426008434L, -1446199891721445424L, 4411344127184291787L, 9069704258451993472L,
			-1855003522545750645L, -2935431101435410200L, 2227039919644584295L, -827113160325590812L,
			-7049842446677517917L, 2235188524754370846L, 1180083019172591112L, 8851751863604639803L,
			-5127260269580515224L, 2183311685864945200L, -4929712050564718469L, -5712051164535791450L,
			-5265328693535940482L, -9153634431718039171L, -1098460558029425184L, 8033279612173353191L,
			250268227252307257L, -3600852138431090571L, -1103483767865969856L, -2314679321952899010L,
			-6885017641306159180L, 1002080589710873347L, -140332603391901459L, -4516136559489311504L,
			8160755485150374927L, 8663088267550250224L, 4429547092545080335L, 3476348341073666281L,
			-2292350204413738236L, -5179455702803416545L, 7674094310638943897L, -5303131227627587100L,
			6539014484588980012L, 4577819153182817308L, -6212739285819941037L, -5373815064538193049L,
			-4756420440264892695L, 8693886103138069477L, 7493494329551957823L, -869096432438349639L,
			8583794709028054763L, 6439936135612853310L, -8075293286520414607L, -347855110657879560L,
			-4839074782846270669L, 7912750313875773875L, -3463278122903847805L, -2456722466920727074L,
			-139666126980020577L, 3602031780683054068L, -1174581364005239071L, 7493494879278444135L,
			-6035276544132356134L, -7011547387614745538L, -1450889446735745031L, -8647180189777793817L,
			-655023712680132626L, -3792386858168877921L, -2066172111050845255L, 6662977702395367228L,
			8919069219540152220L, -870573911611318805L, -2781082451220001583L, 7466473212760347495L,
			8828805820451378899L, 4861893280351391205L, -5165481386880349584L, 7036961086731095914L,
			8240682108128634967L, -8702049976199817951L, 7388005783741106391L, 7053016263277527678L,
			-1437016360555166722L, 1006896004664053310L, -5529918178568879143L, 3257249888556937835L,
			2931708890798470416L, -6934565686606824569L, -5472663844510547364L, 1024551073461869949L,
			-1162892093978571023L, 4099638302868451641L, -4259014986852389740L, -1061870369169965351L,
			-7558704251222306507L, -227508892558793951L, 2776464884952255475L, 8655015731629137918L,
			-2551432950765455216L, -8727430729067492541L, -4751889180360040154L, -8684035425416700281L,
			-400951459417680158L, 8212527850134396429L, -1064920538974580978L, -8668731330451667321L,
			-5595963762643006364L, -916229040833588533L, 2539623302752817960L, 5806207698383280156L,
			-3899394708665701948L, -6408078807267580421L, -1004658351391635349L, 2583142670933383749L,
			-402469242262104956L, -5363296658293169002L, -8428920489023186168L, 8008377784542381542L,
			-5149796752241028437L, 2511103941283401570L, 8035756069296662969L, 1260804194387964634L,
			4363913071802703673L, -1741264902025025212L, -3204241711348979687L, -1051831979187636317L,
			7772804695363576196L, -5075101467177316083L, 2556138872069727886L, 2214899935918763170L,
			7035932440104821103L, 7212104818400401932L, 1584677031863903580L, 8541833391298715132L,
			1782704878651758218L, 7252634256244950552L, 2011315806444911207L, -4284100738911553822L,
			-4068976547864131881L, -7487405926778768564L, -4640820388440696989L, -201651955587394532L,
			-678287365529967572L, 4306875125709308339L, 3535262977116396423L, -5678539098655182222L,
			3183981056040143902L, -3798169333432400516L, 1714542911331890014L, -8309156807685873127L,
			3008104158855482328L, -2585678425532589997L, 7205349766919771950L, -8487051671207232680L,
			-3491282356422567837L, 7159753059275791692L, -4946958394231253363L, 7114215931578686407L,
			8819891589294595275L, -4309593247171398369L, -4244612293857191640L, -4118796604960633359L,
			3802958487763418139L, 7163305162914142923L, 4841686011678989221L, 7186957370041044933L,
			-281647137043828257L, -4222434608326394229L, -1900245584363907085L, 6885066160082432623L,
			-232957795410306837L, -7815688016294472709L, -3066302876960746791L, 4017727107886550291L,
			5498319873946569448L, -7538908666803937754L, 8380183642907808729L, 2855670922437196720L,
			3801551165931384257L, -3367559687534098240L, -8513730046348568541L, 1091481460174195102L,
			-7354264654580505079L, -6474220990989924019L, -7787991569425619304L, -7293370922416785997L,
			5675247504507662433L, -9031677617036309260L, -3871751743928794033L, 1376192466772072073L,
			-246632855380609031L, -4890955713222679772L, 7412225865080715169L, 7332585360680303852L,
			-3792454969434185271L, -8926253621844780476L, 453289714018427599L, 2788937564277007887L,
			-1363859341105478513L, 5489945813497036582L, -4856903281164335985L, 5545277926250873758L,
			693033673610008778L, -5644771094692267448L, -1065974558908592667L, -6992766205474294059L,
			2257286706568079641L, 3906256555972879774L, 1465873045617677266L, 3428777889631343991L,
			5970266666910905897L, 4586551508181297660L, -7797351181005629544L, -7292824053417102770L,
			-8456165891650721494L, -2331676469602244244L, -7786051358743204398L, 4993786434443290943L,
			-6456239283277447887L, 3866239230697170730L, -4636741037062698381L, -6251959684049556142L,
			4409241526249443967L, -655984084380886108L, -4857155849807812904L, -7364887145169626036L,
			-1902536729904381975L, 3447290662946941375L, -6485225915301465805L, -3029987300140225974L,
			-5776767460709029169L, -6568331408599022007L, -5678056278443296099L, -8819972874367625486L,
			6515282357811793116L, -7930456903032903758L, 5505350139284175787L, -3772299779001247279L,
			2752666274261470270L, -7364349897923264873L, -1055928447925758985L, 3665028818451654278L,
			-7558888017600073111L, -2965124117970917699L, -2682599213745152602L, -4655036923723279533L,
			3647014580516550629L, 2118601594522940616L, 8084475710140532006L, 8315446507229583756L,
			-7869585591365352506L, -8311619116109215265L, -1899450126022122874L, -8387535860984798387L,
			-8752224984674186618L, -8243524004987255129L, 5545844835523570067L, 5562628116141177701L,
			1129614593134727692L, 1671744096388374883L, 7399071589316785113L, 8301808963768359293L,
			-5595732495636711633L, 8896907223143095091L, 8819568180866239720L, -7656390204356846514L,
			4120484637861375974L, -988453653594017250L, -3862455584864117556L, 3544674974688715644L,
			-7879070802129318215L, 8978439520608416604L, -3712889588965737755L, 8689919331375506802L,
			5444437680297711768L, -7272904684188770514L, 8063335149910707907L, -2581528646558456722L,
			-7581584500961013149L, 7155880179518406346L, -1614272906347158340L, -7682187210991340104L,
			2023088034083746076L, 1689796318336137199L, -1766998961870533261L, -4814911629694671105L,
			-5118388125905951283L, 2021961462677346531L, 7029705299906370315L, -927830627831720244L,
			-3671636591277297165L, -2308402194581363084L, -3682312972193012893L, 3361907403215037438L,
			-2579480010663381009L, -1751910545933376882L, -8522612450270154146L, -3747152337449915126L,
			4479727794621188700L, 3235932851283523935L, -3538260841704271746L, 4479785079580001558L,
			1614122938518009013L, 149476242258193639L, -5502595451635037517L, 6899904979600601920L,
			-4510489801499605238L, -132239702811909452L, 5739323585609215787L, -6413715075855922132L,
			8696327894256692416L, -4286751720470808156L, 3517056114791423787L, 8696222315528487490L,
			1020461508890239375L, 1545408129729379926L, -3409232699344483732L, 3238282542684191253L,
			-1820577868547347208L, -6007712286154318582L, 4153603227941184672L, 5990142742093164632L,
			2397909895297428362L, 4606586137789465870L, 1599949606465089346L, -2438447900718768432L,
			-6647102755948239475L, 5969003391648681516L, 8191982560325020773L, -147866418563326424L,
			-1889873105720813879L, 6315693392008924019L, 6595941279238050468L, -4269603078149658220L,
			3551926770642506407L, -7768908529528056983L, 3904565791385398879L, -7767536789525095605L,
			-5514541821819530262L, 6189604615370766769L, -6607544146825631131L, -4030128705669346909L,
			5971255138538131429L, -6465300640478514766L, 8988955562895795597L, 5939734339226573221L,
			-2761334643659158855L, -5646300580576641960L, 7089062832472959140L, 5560067112004942179L,
			4574116287172165540L, 5731256197853142926L, -1822002128298942510L, -6155238397356940123L,
			-956456393244048411L, 807826183243667320L, 6397952768624406301L, -456617534353880484L, 3228355967785617946L,
			2676992447032416021L, 2762662051490256306L, 5081622876649126321L, 3652231782422589858L,
			7000057641161224369L, -7856199839629420343L, -8496842968599568031L, 5024620869538720356L,
			-8355858275324935487L, -3887635718459810218L, 8959613876842341235L, 6095719889241472917L,
			-6029807864129565954L, -5807294096857506218L, -3955825145607770718L, 6873907726326162885L,
			5390431040240271946L, 5092718695239813831L, 3043496996079562667L, 4515680412963252921L,
			-6646536476044761002L, -7362494104868684822L, -7206469309719161768L, 6384333145105212003L,
			-6512392036649935186L, -814365741061405035L, 1854236445810404584L, 6255971789253851224L,
			-2206863257360143311L, -5812470731375949114L, -6309349758319581194L, -2278885805525117576L,
			6337507498008635314L, 6930204018181026224L, -7637705734958432406L, -239986502711678403L,
			-6064462579498365593L, -5391837024578343446L, -3273775299451769097L, -1920214954847263923L,
			5591177621244436557L, -7216353926803567265L, 3890781825138030490L, 1600421454398616401L,
			-4775285958704666022L, -3156324815789692054L, 1847573853901305133L, 7663670948175796887L,
			4430509468906552277L, 6898476684440603738L, 480985066879341003L, 1870462473044089135L, 6328738766634202620L,
			6333007125822734169L, -409214743711948547L, -2342166343066098294L, 6556866576315014653L,
			-3279184951019333935L, 7778686523156035574L, -3957197462108486579L, -7828761757830952172L,
			-3631170973126173079L, -1978621240170405215L, 5567459616504887741L, -2188390125955143487L,
			-4528802025138464341L, -3344175115144066250L, -2756532062264377210L, 6200749814622360017L,
			2015981948528653677L, -5302150193389524979L, -1239879622559339413L, -1979536204304550042L,
			-2883197731946153164L, 7397802537520780440L, -7990518641520600148L, 7780151707283361388L,
			-5715382845845377794L, -716536106491484791L, 496269905961747227L, -4725977347553072920L,
			-3215466629471793250L, -1758296705131293472L, 6914113094091649603L, 2524046264678241805L,
			-1858523882730605518L, 4918963535396791488L, 5048092030396665452L, -1103415309483743138L,
			8650855351303643487L, 7155778322461474054L, -641096185828355924L, -440260051284956226L,
			7667896003960057041L, -2432157426211579219L, 6538570891110537909L, -7433324245971171493L,
			-6022493821327287783L, -5749672066548880401L, -5369183136807947987L, -4128119881874225739L,
			6232817944248073965L, -4242756624841460456L, -2890649281345253707L, 8248672123122802006L,
			1110834023334644577L, 3278256851628761541L, -5938552266306522008L, 7314574046721127640L,
			-3030278050258059521L, 1636876213681123275L, 4519834765541918554L, -4869814333708978756L,
			-3246450556374699605L, 9055091918401754594L, 6227157130394529035L, -1767427786488836172L,
			-5769685635883406346L, 3421607474755326186L, 3597553630823900565L, 6223667908243725309L,
			-516583292712534539L, 8135876616177502480L, 2143560036449677032L, -1104292634268862469L,
			8615781236965396125L, -1382330219574484949L, -1310151966778857746L, -530109818146964871L,
			-4930576026244627533L, -8187620670160873258L, 7014681597868917287L, -4362525404332592014L,
			8513803807649081255L, 8387630560714796253L, -2208691160554613059L, 8328480877481519316L,
			-3961587618717011939L, -4650826040238826023L, -5290870591804804948L, -2047714170216919361L,
			4239979870059140025L, 4282056608430537936L, -3930906356696386915L, -5064681117958870402L,
			6482063481130360555L, 7554223128662877603L, 6136096721530398499L, 8373577060338330426L,
			2227365017877499462L, -1663842699414357042L, -2534144273820102465L, -3958878007013218255L,
			-5938269361806822995L, -1760592102867492809L, -3173251210618899809L, 3997645774512938638L,
			-1484578471382475031L, 3579297118654135892L, -4345306378875324066L, -6995227551220658841L,
			-4788208298153364433L, -3462624694195889962L, -3787811361411041414L, 5606760799989430486L,
			7158910747668837656L, -2969159691210466242L, 9054425147980872446L, -1628694072918415947L,
			6827432818578541558L, 8812576220818233087L, 7714419826830462795L, 4440256181985038991L,
			7042799513794116911L, -1747611595418263841L, -3788444306566041826L, -5225623673068036116L,
			5185076515396194158L, -742430729396817318L, 5729597320361110130L, 8516210094190744420L,
			-2262142584099935296L, -5944427688643473297L, 484553712780980976L, -3521688396110765865L,
			-9196627872385767792L, 650404902674304153L, -4795498933448215872L, 5812679288152264060L,
			3805658924107974403L, 2237576765752674108L, 1980172034802497287L, 5484202016867366608L,
			7822986776536803029L, -9111055990444219583L, -3523731984962469586L, 1791934516277833475L,
			-7131944677691977719L, 449629615273635815L, 8366223844916559289L, -4126456642284134649L,
			-477169650004715216L, 8061625582618988652L, -4558696987802407807L, 5080967926940370462L,
			1923159914482628358L, -7346017389305577138L, 2003048515177904183L, -1714881905304251513L,
			6339891238948040236L, -7387432985544614936L, 8494238647089813622L, -4488176289397724107L,
			-7323709979471612407L, -620072132132326068L, -4906622215703936361L, -8418229832584809792L,
			2670402546856236926L, -4985228040979637792L, 7072545771384938170L, -3393424165452867253L,
			-1163005726607276217L, 4177689723742513522L, -2479258084300441717L, -3713577185039495361L,
			-7508206489502714911L, -6500001049489519813L, 3835372270207318621L, 8712533159426159921L,
			-6098181262346998248L, 8645136876620790652L, -2479376762765977677L, 8269037275198963845L,
			9164397329910279782L, -6914295163376368165L, 3347504798456199035L, 8283252070761133249L,
			-5220801729714336949L, -3775007345496594732L, -8423432098968374117L, 860007966650442638L,
			3664426924957243889L, 7837587103098388249L, 5750799223922083520L, 4420685063823849742L,
			-2646229912753827994L, -7074701793235266353L, -4117219042724229592L, -6373184335374760262L,
			-8288083979292926922L, -3285776119154250268L, -7254737041048542049L, 5845136825841387334L,
			-136966702196898243L, 7549362909936531821L, -4271081594405950012L, -4975995865420420893L,
			6590241912826597702L, 2557277868421785699L, -2452103072429134962L, -273344230077673098L,
			1747181026029357027L, 4610475420356122606L, -8252053120883005131L, 9130924268714865562L,
			5856783407805581081L, 7895959440805437421L, -3810436591080074889L, 5115358846362182470L,
			-136966686088225159L, 7481731627510231746L, 2906949418662091556L, 4850293894810550962L, 704574307321426313L,
			6856230568044744216L, 3947910108499840841L, 1628063325434921649L, -6218689005344980717L,
			2100646208436048766L, 5619421384546975384L, -216714367599708311L, 8231939337215731354L,
			-3919194038563774595L, -4418196757439886225L, -584032825164790455L, -2332868049060791326L,
			-8842467557112022300L, -6271456440937271513L, -6009367148403029593L, 2792220656674992234L,
			-4419639134378486327L, 3185146608872279224L, 3846591009665135346L, -6573200524804044980L,
			3664351844797279202L, -8428008248208461093L, 5751087324444227956L, -6348325464582854199L,
			-4702857869844945622L, -7827975319777486900L, -4987065507854490922L, -7694489132060659681L,
			-1220941774713101481L, -2397948018311696545L, -721372577935529078L, 6293706515396613612L,
			8270203944273372555L, 3120815278362704687L, -3472026364876631325L, -8478211893514393897L,
			4705698384065965779L, -4729672533865963673L, 9193860793592012189L, 7194207856227025702L,
			6317629929103369815L, 8987771909419874770L, -1947154701075203979L, -3028758989548823428L,
			-3080551484783632978L, 8862966652310514794L, -90130479948633046L, -8692565655855169798L,
			6047720744949766531L, 6149558332711426047L, -674576780519381319L, 4518200920374619307L,
			-108203189765744555L, -4629714974372636813L, -48019250859527379L, 7375432448414001511L,
			-4799809418499207182L, -2941835936654859307L, 3180614351096196723L, -1677080440306107651L,
			-8333432220575111626L, -301820108279041186L, -3641101149291716915L, 8275835523884739578L,
			-3676347366552384452L, -3213055838215248231L, 7838141427734714745L, -6426869542198523220L,
			-2895963865542331681L, -8342386329474098769L, 7411074125582345881L, 7328369511087656242L,
			-996382042433066213L, 3683607323959044455L, 8344268697678658763L, 7256387730077430764L,
			3890952662520675992L, -753480391788233562L, -4527226139809769153L, 7371436896149536716L,
			-941062760308213396L, -2981539729981610470L, -3682089232817795703L, 3701902487199051564L,
			3663241639750754609L, 2247000266968569754L, 6827000546680703823L, 3231530941016041825L,
			-7960368143529822954L, 9042437722722202018L, -5246788420831416120L, -7877979531261891086L,
			-3003074344242284399L, -5253878411302595010L, 6483042654063950585L, 7117481593275129534L,
			-7426128066814610043L, 3969498099842750143L, -21767702408167847L, -794949725461141737L,
			6443456642892633657L, 7773651959933353708L, 5466789129683602271L, 3206276534173609050L,
			-4721506101902812944L, 7607049909023003006L, 8960730252843467279L, 812387338681471789L,
			-3464231658918682143L, -9005621360101629563L, 4976018398174422426L, 6827114363468166552L,
			5410716704345589055L, 1601429863116043659L, 415200044023656389L, 6681627655439040210L, 7763493019295510367L,
			-475475362389729415L, 7342434290020793700L, -1905280205826904663L, 1906902235119005615L,
			-5451198538477381858L, 6463065573983346527L, 1948861642874039039L, -5843762923550579027L,
			8282237046261113557L, 5428664375687419150L, -6053205572724565653L, -6501602952986531996L,
			-6046720943976815189L, -721281049597592980L, -5345097426968731812L, -880406483880118621L,
			8931463015225995094L, -119119377471019907L, 8110237097064065757L, 3151770118850456917L,
			2260720613865290459L, -4907609036177035348L, 6392246598112859820L, 6550964763500699478L,
			6798519451975620019L, 6231130056183624534L, -181386744904890419L, -3713002746650034554L,
			6284619112372989624L, 8400186851504475631L, 9143302968319538107L, -2310089982821505554L,
			-3940307258845828753L, -1817876339058378737L, 5754539119817805231L, -5117851216143705123L,
			-4062075621431068817L, 6373952157438887373L, -7171767299133771325L, -6585423746372814367L,
			-3436960395184738434L, -352600336082389187L, -277486096820799753L, 9103168735052479430L,
			-6423426268338434730L, -4978422385427814125L, 3979468370972830173L, -5192815023335444612L,
			-4348265919399724058L, -5206616559029142943L, -3220752418365813402L, -4980467381475280435L,
			8047858779147648637L, 3679404564124773492L, -7812215965211169313L, 3524830868436646972L,
			7813700013513289095L, -4357707783493557869L, -7262462477726672039L, 7188771731035644370L,
			-6453816931818855626L, 7906267922599447733L, -7408080429256556058L, -2603083889131999023L,
			6986203903166800337L, -8771433593140816485L, 8034302288830922118L, 5267818715740300925L,
			-2795649552393492883L, 4373243528194022349L, -330818954616689043L, 8860821609109134111L,
			7789175433410083184L, -7806085354796432346L, -5229067036623934158L, -3078606938026577814L,
			-2052641808196213869L, -6073631954375733853L, 3941711279497641661L, -3358572764700813068L,
			-1491387614007595623L, 7735614833942636781L, -8846698673234811146L, -2616475231288105186L,
			2192607435094068510L, 1954119379714449007L, 8207859936278870196L, -3355975342153007104L };

	/* State, all of this gets reinitialized with every call to sort() */
	private static long[] myPrimes;
	private static Set<Long> newPrimes;
	private static ArrayList<Long> newPrimes2;
	private static long[] newPrimes3;
	private static Map<Long, Long> lookupTable;
	private static BigInteger TWO;
	private static SecureRandom random;
	private static byte[] bstore;

	public class MySortedSet {
		private Hashtable<Long, Boolean> table = new Hashtable<>();
		public int length;
		public long[] myArray = new long[0];

		public MySortedSet() {

		}

		public boolean contains(long l) {
			return table.contains(l);
		}

		public void add(long l) {
			int point = Arrays.binarySearch(myArray, l);
			if (point == myArray.length) {
				long[] tmp = new long[myArray.length + 1];
				System.arraycopy(myArray, 0, tmp, 0, myArray.length);
				tmp[myArray.length] = l;
				myArray = tmp;
			}
		}
	}

	public static void main(String[] args) throws InterruptedException, FileNotFoundException {

		if (args.length < 2) {
			System.out.println("Please run with two command line arguments: input and output file names");
			System.exit(0);
		}

		String inputFileName = args[0];
		String outFileName = args[1];

		long[] data = readData(inputFileName);

		long[] toSort = data.clone();

		long[] sorted = sort(toSort);

		toSort = data.clone();

		Thread.sleep(10); // to let other things finish before timing; adds stability of runs

		long start = System.currentTimeMillis();

		sorted = sort(toSort);

		long end = System.currentTimeMillis();
		System.out.println(end - start);

		writeOutResult(sorted, outFileName);

	}

	// YOUR SORTING METHOD GOES HERE.
	// You may call other methods and use other classes.
	// Note: you may change the return type of the method.
	// You would need to provide your own function that prints your sorted array to
	// a file in the exact same format that my program outputs
	private static long[] sort(long[] toSort) {

		long[] toReturn = new long[toSort.length];
		long[] factors = new long[toSort.length];

		/* Reinit state */
		newPrimes = new HashSet<Long>();
		newPrimes2 = new ArrayList<Long>();
		newPrimes3 = new long[0];
		lookupTable = new HashMap<Long, Long>();
		byte[] seed = { (byte) 0xDE, (byte) 0xAD, (byte) 0xBE, (byte) 0xEF };
		random = new SecureRandom(seed);
		TWO = new BigInteger("2");
		random = new SecureRandom(seed);
		bstore = new byte[Long.BYTES];
		myPrimes = decodeLongs(longstobytes(myLongs));

		SortedMap<Long, Short> counts = new TreeMap<Long, Short>();

		for (int i = 0; i < toSort.length; i++) {
			long x = toSort[i];
			long mine = productOfPrimeFactors(x);

			if (counts.putIfAbsent(mine, (short) 1) != null) {
				counts.put(mine, (short) (counts.get(mine) + 1));
			}
			factors[i] = mine;
		}

		Map<Long, Short> indexes = new HashMap<Long, Short>();

		short counter = 0;
		int i = 1;

		Iterator<Long> it = counts.keySet().iterator();

		long currentKey = it.next();
		indexes.put(currentKey, (short) 0);
		counter += counts.get(currentKey);

		while (it.hasNext() && i < counts.size()) {
			long newKey = it.next();
			indexes.put(newKey, counter);
			counter += counts.get(newKey);
			i++;
		}

		for (int z = 0; z < toSort.length; z++) {
			long l = toSort[z];
			long value = factors[z];
			toReturn[indexes.get(value)] = l;
			indexes.put(value, (short) (indexes.get(value) + 1));
		}

		counts.forEach((key, value) -> {
			if (value > 1) {
				short oldIndex = indexes.get(key);
				Arrays.sort(toReturn, oldIndex - value, oldIndex);
			}
		});

		return toReturn;
	}

	private static long[] readData(String inFile) throws FileNotFoundException {
		ArrayList<Long> input = new ArrayList<>();
		Scanner in = new Scanner(new File(inFile));

		while (in.hasNext()) {
			input.add(Long.valueOf(in.next()));
		}

		in.close();

		long[] toReturn = new long[input.size()];
		for (int i = 0; i < toReturn.length; i++) {
			toReturn[i] = input.get(i);
		}

		return toReturn;
	}

	private static void writeOutResult(long[] sorted, String outputFilename) throws FileNotFoundException {

		PrintWriter out = new PrintWriter(outputFilename);
		for (long n : sorted) {
			out.println(n);
		}
		out.close();

	}

	public static BigInteger rho(BigInteger N) {
		BigInteger divisor;
		BigInteger c = new BigInteger(N.bitLength(), random);
		BigInteger x = new BigInteger(N.bitLength(), random);
		BigInteger xx = x;

		if (N.compareTo(BigInteger.ONE) == 0) {
			return BigInteger.ONE;
		}

		// check divisibility by 2
		if (N.mod(TWO).compareTo(BigInteger.ZERO) == 0)
			return TWO;

		do {
			x = x.multiply(x).mod(N).add(c).mod(N);
			xx = xx.multiply(xx).mod(N).add(c).mod(N);
			xx = xx.multiply(xx).mod(N).add(c).mod(N);
			divisor = x.subtract(xx).gcd(N);
		} while ((divisor.compareTo(BigInteger.ONE)) == 0);

		return divisor;
	}

	private static long factor(long n) {
		if (n == 0)
			return 0;
		if (n == 1)
			return 1;

		if (n < myPrimes[myPrimes.length - 1]) {
			int point = Arrays.binarySearch(myPrimes, n);
			if (myPrimes[point] == n) {
				return n;
			} else {
				for (long l : myPrimes) {
					if (n % l == 0) {
						return l;
					}
				}
			}
		}

		if (BigInteger.valueOf(n).isProbablePrime(20)) {
			return n;
		}

		long divisor = rho(BigInteger.valueOf(n)).longValue();
		long t = factor(divisor);
		long t2 = factor(n / divisor);
		if (t == 0 || t == 1) {
			return t2;
		}
		if (t2 == 0 || t2 == 1) {
			return t;
		}
		return Math.min(t, t2);
	}

	private static long productOfPrimeFactors(long n) {
		if (lookupTable.containsKey(n)) {
			return lookupTable.get(n);
		}

		long prime1 = 1;
		long prime2 = 1;

		prime1 = getPrime(n, 0);
		if (n == prime1) {
			lookupTable.put(n, n);
			return n;
		}
		prime2 = getPrime(n / prime1, prime1);

		if (prime2 == prime1) {
			lookupTable.put(n, prime1);
			return prime1;
		}

		if (prime2 >= Math.sqrt(n)) {
			long prime3 = getPrime(n / prime1 / prime2, prime1);
			if (prime3 != 1) {
				prime2 = Math.min(prime2, prime3);
			}
		}

		lookupTable.put(n, prime1 * prime2);
		return prime1 * prime2;

	}

	private static long[] toArray(Collection<? extends Number> collection) {
		Object[] boxedArray = collection.toArray();
		int len = boxedArray.length;
		long[] array = new long[len];
		for (int i = 0; i < len; i++) {
			array[i] = ((Number) boxedArray[i]).longValue();
		}
		return array;
	}

	private static long getPrime(long n, long start) {

		if (start != 0 && n % start == 0) {
			while (n % start == 0) {
				n = n / start;
			}
		}

		if (n == 1 || n == 0 || n < start) {
			return 1;
		}

		for (int i = 0; i < myPrimes.length; i++) {
			if (start != 0 && n % myPrimes[i] == 0 && myPrimes[i] % n != 0) {
				return myPrimes[i];
			} else if (n % myPrimes[i] == 0) {
				return myPrimes[i];
			}
		}

		for (int i = 0; i < newPrimes3.length; i++)
			if (newPrimes3[i] == n)
				return n;

		for (long l : newPrimes3) {
			if (n % l == 0) {
				return l;
			}
		}

		if (BigInteger.valueOf(n).isProbablePrime(20)) {
			newPrimes.add(n);
			newPrimes2.add(n);
			newPrimes3 = toArray(newPrimes2);
			return n;
		}

		long slow = factor(n);
		newPrimes.add(slow);
		newPrimes2.add(slow);
		newPrimes3 = toArray(newPrimes2);

		return slow;

	}

	private static byte[] longstobytes(long[] b) {
		byte b2[] = new byte[b.length * Long.BYTES];
		ByteBuffer buffer = ByteBuffer.wrap(b2);
		for (int i = 0; i < b.length; i++) {
			buffer.putLong(b[i]);
		}

		return b2;
	}

	private static long fromBase64byes(byte[] in) {
		int length = Base64.getDecoder().decode(in, bstore);

		long l3 = 0;
		int shift = 0;
		for (int i = length - 1; i >= 0; i--) {
			l3 += (long) (((long) bstore[i] & 0xFF) << (long) shift);
			shift += 8;
		}

		return l3;
	}

	private static long[] decodeLongs(final byte[] b) {
		long[] tmplist = new long[0x1000];
		int numlongs = 0;
		byte[] uncompressedbytes = new byte[0];

		try {
			GZIPInputStream gi = new GZIPInputStream(new ByteArrayInputStream(b));

			ByteArrayOutputStream os = new ByteArrayOutputStream();

			byte[] buffer = new byte[0xFFFF];

			for (int len; (len = gi.read(buffer)) != -1;)
				os.write(buffer, 0, len);

			os.flush();

			uncompressedbytes = os.toByteArray();

			int begin = 0;
			int bytecount = 0;

			for (int i = 0; i < uncompressedbytes.length; i++) {
				if (uncompressedbytes[i] == (byte) '\n') {
					if (bytecount < 2) {
						break;
					}
					byte[] br = Arrays.copyOfRange(uncompressedbytes, begin, begin + bytecount);
					long t = fromBase64byes(br);
					tmplist[numlongs++] = t;
					bytecount = 0;
					begin = i + 1;
				} else {
					bytecount++;
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
		return Arrays.copyOf(tmplist, numlongs);
	}
}
